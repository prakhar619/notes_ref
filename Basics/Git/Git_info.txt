Git
	DVCS
		Distributed Version Control
		Each user/collaborator has full history in local system.
	Snapshots based System
		Different from Delta Based Version Control where only changes are stored
		Kind of like storing file but not actuallyq
	3 Stages
		Commited
		Staged
		Modified
	.git Repository
		All versions
	Working Dir
		Current version
	Transfer Protocols:
		https 	(https://)
		ssh	(git://) or (user@server:path)
	Lifecycle of status of your files
		Untracked
			Files which are not being tracked (usually new file;)
			Files which are not present last snapshot and not in staging area
			directly switched to staged status after saving
		Unmodified
			File same as last snapshot;
			Commited Files
		Modified
			File which is already present in last snapshot but editted
		Staged
			New added file or Modified file staged; 
	Blobs
		version of file
		3 blobs (each 3 version)(each version itself can contain multiple files)
	Git Repository Objects
		Commit List
			Commit node 
				Tree node 
					Blob 
					Blob 
					Blob 
		HEAD pointer
	Git merging	
		FastForward 
			No divergent working
			No new commit; just forwarding of branch
			Same line
			History of both is checked to see if fastforwarding is available
		3WayMerge 
			current branch is updated with new commit; branch_name doesn't changes
			common ancestor; both branches ptr 
			Different line 
			merge commit (A new commit is done)
			merge commit has more than one parent;




	
	